/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createFastEndpointsErrorResponseFromDiscriminatorValue, createServerSharedModelsApiResponseOfAddWorkflowResponseDtoFromDiscriminatorValue, createServerSharedModelsApiResponseOfEditWorkflowResponseDtoFromDiscriminatorValue, serializeServerSharedModelsApiResponseOfAddWorkflowResponseDto, serializeServerSharedModelsApiResponseOfEditWorkflowResponseDto, serializeServerWorkflowsContractsCommandsAddWorkflowCommand, serializeServerWorkflowsContractsCommandsEditWorkflowCommand, type FastEndpointsErrorResponse, type ServerSharedModelsApiResponseOfAddWorkflowResponseDto, type ServerSharedModelsApiResponseOfEditWorkflowResponseDto, type ServerWorkflowsContractsCommandsAddWorkflowCommand, type ServerWorkflowsContractsCommandsEditWorkflowCommand } from '../models/index.js';
// @ts-ignore
import { AllRequestBuilderRequestsMetadata, type AllRequestBuilder } from './all/index.js';
// @ts-ignore
import { AllowedWorkflowsRequestBuilderRequestsMetadata, type AllowedWorkflowsRequestBuilder } from './allowedWorkflows/index.js';
// @ts-ignore
import { AssignWorkflowUserRequestBuilderRequestsMetadata, type AssignWorkflowUserRequestBuilder } from './assignWorkflowUser/index.js';
// @ts-ignore
import { type WorkflowItemRequestBuilder, WorkflowItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { KanbanCardsRequestBuilderNavigationMetadata, type KanbanCardsRequestBuilder } from './kanbanCards/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /workflow
 */
export interface WorkflowRequestBuilder extends BaseRequestBuilder<WorkflowRequestBuilder> {
    /**
     * The all property
     */
    get all(): AllRequestBuilder;
    /**
     * The allowedWorkflows property
     */
    get allowedWorkflows(): AllowedWorkflowsRequestBuilder;
    /**
     * The assignWorkflowUser property
     */
    get assignWorkflowUser(): AssignWorkflowUserRequestBuilder;
    /**
     * The kanbanCards property
     */
    get kanbanCards(): KanbanCardsRequestBuilder;
    /**
     * Gets an item from the ApiSdk.workflow.item collection
     * @param id Unique identifier of the item
     * @returns {WorkflowItemRequestBuilder}
     */
     byId(id: string) : WorkflowItemRequestBuilder;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ServerSharedModelsApiResponseOfAddWorkflowResponseDto>}
     * @throws {FastEndpointsErrorResponse} error when the service returns a 400 status code
     */
     post(body: ServerWorkflowsContractsCommandsAddWorkflowCommand, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ServerSharedModelsApiResponseOfAddWorkflowResponseDto | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ServerSharedModelsApiResponseOfEditWorkflowResponseDto>}
     * @throws {FastEndpointsErrorResponse} error when the service returns a 400 status code
     */
     put(body: ServerWorkflowsContractsCommandsEditWorkflowCommand, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ServerSharedModelsApiResponseOfEditWorkflowResponseDto | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ServerWorkflowsContractsCommandsAddWorkflowCommand, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: ServerWorkflowsContractsCommandsEditWorkflowCommand, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WorkflowRequestBuilderUriTemplate = "{+baseurl}/workflow";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WorkflowRequestBuilderNavigationMetadata: Record<Exclude<keyof WorkflowRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: WorkflowItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["id"],
    },
    all: {
        requestsMetadata: AllRequestBuilderRequestsMetadata,
    },
    allowedWorkflows: {
        requestsMetadata: AllowedWorkflowsRequestBuilderRequestsMetadata,
    },
    assignWorkflowUser: {
        requestsMetadata: AssignWorkflowUserRequestBuilderRequestsMetadata,
    },
    kanbanCards: {
        navigationMetadata: KanbanCardsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WorkflowRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: WorkflowRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createFastEndpointsErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createServerSharedModelsApiResponseOfAddWorkflowResponseDtoFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeServerWorkflowsContractsCommandsAddWorkflowCommand,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
    put: {
        uriTemplate: WorkflowRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createFastEndpointsErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createServerSharedModelsApiResponseOfEditWorkflowResponseDtoFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeServerWorkflowsContractsCommandsEditWorkflowCommand,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
