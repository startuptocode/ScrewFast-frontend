/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useKasumiApiContext, type KasumiApiContext } from "./kasumiApiContext";
import type * as Fetcher from "./kasumiApiFetcher";
import { kasumiApiFetch } from "./kasumiApiFetcher";
import type * as Schemas from "./kasumiApiSchemas";

export type ServerNotificationEndPointsStreamEventsTenantEventStreamPathParams =
  {
    tenantId: string;
  };

export type ServerNotificationEndPointsStreamEventsTenantEventStreamError =
  Fetcher.ErrorWrapper<undefined>;

export type ServerNotificationEndPointsStreamEventsTenantEventStreamVariables =
  {
    pathParams: ServerNotificationEndPointsStreamEventsTenantEventStreamPathParams;
  } & KasumiApiContext["fetcherOptions"];

export const fetchServerNotificationEndPointsStreamEventsTenantEventStream = (
  variables: ServerNotificationEndPointsStreamEventsTenantEventStreamVariables,
  signal?: AbortSignal,
) =>
  kasumiApiFetch<
    void,
    ServerNotificationEndPointsStreamEventsTenantEventStreamError,
    undefined,
    {},
    {},
    ServerNotificationEndPointsStreamEventsTenantEventStreamPathParams
  >({ url: "/streams/{tenantId}", method: "get", ...variables, signal });

export const useServerNotificationEndPointsStreamEventsTenantEventStream = <
  TData = void,
>(
  variables: ServerNotificationEndPointsStreamEventsTenantEventStreamVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      void,
      ServerNotificationEndPointsStreamEventsTenantEventStreamError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useKasumiApiContext(options);
  return reactQuery.useQuery<
    void,
    ServerNotificationEndPointsStreamEventsTenantEventStreamError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/streams/{tenantId}",
      operationId: "serverNotificationEndPointsStreamEventsTenantEventStream",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchServerNotificationEndPointsStreamEventsTenantEventStream(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ServerNotificationEndPointsHelloWorldGetHelloWorldEndPointError =
  Fetcher.ErrorWrapper<undefined>;

export type ServerNotificationEndPointsHelloWorldGetHelloWorldEndPointVariables =
  {
    body?: Schemas.ServerNotificationContractsMessageQueriesGetMessageQuery;
  } & KasumiApiContext["fetcherOptions"];

export const fetchServerNotificationEndPointsHelloWorldGetHelloWorldEndPoint = (
  variables: ServerNotificationEndPointsHelloWorldGetHelloWorldEndPointVariables,
  signal?: AbortSignal,
) =>
  kasumiApiFetch<
    Schemas.ServerNotificationContractsMessageDtosGetMessageResponseDto,
    ServerNotificationEndPointsHelloWorldGetHelloWorldEndPointError,
    Schemas.ServerNotificationContractsMessageQueriesGetMessageQuery,
    {},
    {},
    {}
  >({ url: "/hello/world", method: "post", ...variables, signal });

export const useServerNotificationEndPointsHelloWorldGetHelloWorldEndPoint = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ServerNotificationContractsMessageDtosGetMessageResponseDto,
      ServerNotificationEndPointsHelloWorldGetHelloWorldEndPointError,
      ServerNotificationEndPointsHelloWorldGetHelloWorldEndPointVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useKasumiApiContext();
  return reactQuery.useMutation<
    Schemas.ServerNotificationContractsMessageDtosGetMessageResponseDto,
    ServerNotificationEndPointsHelloWorldGetHelloWorldEndPointError,
    ServerNotificationEndPointsHelloWorldGetHelloWorldEndPointVariables
  >({
    mutationFn: (
      variables: ServerNotificationEndPointsHelloWorldGetHelloWorldEndPointVariables,
    ) =>
      fetchServerNotificationEndPointsHelloWorldGetHelloWorldEndPoint({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ServerSocialNetworkEndPointsHubsAddHubEndPointPathParams = {
  platformId: string;
};

export type ServerSocialNetworkEndPointsHubsAddHubEndPointError =
  Fetcher.ErrorWrapper<undefined>;

export type ServerSocialNetworkEndPointsHubsAddHubEndPointVariables = {
  body?: Schemas.ServerSocialNetworkEndPointsHubsRequestsAddHubRequest;
  pathParams: ServerSocialNetworkEndPointsHubsAddHubEndPointPathParams;
} & KasumiApiContext["fetcherOptions"];

export const fetchServerSocialNetworkEndPointsHubsAddHubEndPoint = (
  variables: ServerSocialNetworkEndPointsHubsAddHubEndPointVariables,
  signal?: AbortSignal,
) =>
  kasumiApiFetch<
    Schemas.ServerSharedModelsApiResponseOfAddHubResponse,
    ServerSocialNetworkEndPointsHubsAddHubEndPointError,
    Schemas.ServerSocialNetworkEndPointsHubsRequestsAddHubRequest,
    {},
    {},
    ServerSocialNetworkEndPointsHubsAddHubEndPointPathParams
  >({ url: "/hub/{platformId}", method: "post", ...variables, signal });

export const useServerSocialNetworkEndPointsHubsAddHubEndPoint = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ServerSharedModelsApiResponseOfAddHubResponse,
      ServerSocialNetworkEndPointsHubsAddHubEndPointError,
      ServerSocialNetworkEndPointsHubsAddHubEndPointVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useKasumiApiContext();
  return reactQuery.useMutation<
    Schemas.ServerSharedModelsApiResponseOfAddHubResponse,
    ServerSocialNetworkEndPointsHubsAddHubEndPointError,
    ServerSocialNetworkEndPointsHubsAddHubEndPointVariables
  >({
    mutationFn: (
      variables: ServerSocialNetworkEndPointsHubsAddHubEndPointVariables,
    ) =>
      fetchServerSocialNetworkEndPointsHubsAddHubEndPoint({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ServerSocialNetworkEndPointsHubsGetHubsEndPointQueryParams = {
  tenantId: string;
};

export type ServerSocialNetworkEndPointsHubsGetHubsEndPointError =
  Fetcher.ErrorWrapper<undefined>;

export type ServerSocialNetworkEndPointsHubsGetHubsEndPointVariables = {
  queryParams: ServerSocialNetworkEndPointsHubsGetHubsEndPointQueryParams;
} & KasumiApiContext["fetcherOptions"];

export const fetchServerSocialNetworkEndPointsHubsGetHubsEndPoint = (
  variables: ServerSocialNetworkEndPointsHubsGetHubsEndPointVariables,
  signal?: AbortSignal,
) =>
  kasumiApiFetch<
    Schemas.ServerSharedModelsApiResponseOfGetHubsResponse,
    ServerSocialNetworkEndPointsHubsGetHubsEndPointError,
    undefined,
    {},
    ServerSocialNetworkEndPointsHubsGetHubsEndPointQueryParams,
    {}
  >({ url: "/hub/all", method: "get", ...variables, signal });

export const useServerSocialNetworkEndPointsHubsGetHubsEndPoint = <
  TData = Schemas.ServerSharedModelsApiResponseOfGetHubsResponse,
>(
  variables: ServerSocialNetworkEndPointsHubsGetHubsEndPointVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ServerSharedModelsApiResponseOfGetHubsResponse,
      ServerSocialNetworkEndPointsHubsGetHubsEndPointError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useKasumiApiContext(options);
  return reactQuery.useQuery<
    Schemas.ServerSharedModelsApiResponseOfGetHubsResponse,
    ServerSocialNetworkEndPointsHubsGetHubsEndPointError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/hub/all",
      operationId: "serverSocialNetworkEndPointsHubsGetHubsEndPoint",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchServerSocialNetworkEndPointsHubsGetHubsEndPoint(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ServerSocialNetworkSimulatorEndPointsWebHoooksMessageWebHookEndPointError =
  Fetcher.ErrorWrapper<undefined>;

export type ServerSocialNetworkSimulatorEndPointsWebHoooksMessageWebHookEndPointVariables =
  {
    body?: Schemas.ServerSocialNetworkSimulatorEndPointsWebHoooksMessageRequest;
  } & KasumiApiContext["fetcherOptions"];

export const fetchServerSocialNetworkSimulatorEndPointsWebHoooksMessageWebHookEndPoint =
  (
    variables: ServerSocialNetworkSimulatorEndPointsWebHoooksMessageWebHookEndPointVariables,
    signal?: AbortSignal,
  ) =>
    kasumiApiFetch<
      Schemas.ServerSocialNetworkSimulatorEndPointsWebHoooksMessageResponse,
      ServerSocialNetworkSimulatorEndPointsWebHoooksMessageWebHookEndPointError,
      Schemas.ServerSocialNetworkSimulatorEndPointsWebHoooksMessageRequest,
      {},
      {},
      {}
    >({
      url: "/simulator/webhooks/message",
      method: "post",
      ...variables,
      signal,
    });

export const useServerSocialNetworkSimulatorEndPointsWebHoooksMessageWebHookEndPoint =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        Schemas.ServerSocialNetworkSimulatorEndPointsWebHoooksMessageResponse,
        ServerSocialNetworkSimulatorEndPointsWebHoooksMessageWebHookEndPointError,
        ServerSocialNetworkSimulatorEndPointsWebHoooksMessageWebHookEndPointVariables
      >,
      "mutationFn"
    >,
  ) => {
    const { fetcherOptions } = useKasumiApiContext();
    return reactQuery.useMutation<
      Schemas.ServerSocialNetworkSimulatorEndPointsWebHoooksMessageResponse,
      ServerSocialNetworkSimulatorEndPointsWebHoooksMessageWebHookEndPointError,
      ServerSocialNetworkSimulatorEndPointsWebHoooksMessageWebHookEndPointVariables
    >({
      mutationFn: (
        variables: ServerSocialNetworkSimulatorEndPointsWebHoooksMessageWebHookEndPointVariables,
      ) =>
        fetchServerSocialNetworkSimulatorEndPointsWebHoooksMessageWebHookEndPoint(
          { ...fetcherOptions, ...variables },
        ),
      ...options,
    });
  };

export type ServerWorkflowsEndPointsWorkflowAddWorkflowEndPointError =
  Fetcher.ErrorWrapper<undefined>;

export type ServerWorkflowsEndPointsWorkflowAddWorkflowEndPointVariables = {
  body?: Schemas.ServerWorkflowsContractsCommandsAddWorkflowCommand;
} & KasumiApiContext["fetcherOptions"];

export const fetchServerWorkflowsEndPointsWorkflowAddWorkflowEndPoint = (
  variables: ServerWorkflowsEndPointsWorkflowAddWorkflowEndPointVariables,
  signal?: AbortSignal,
) =>
  kasumiApiFetch<
    Schemas.ServerSharedModelsApiResponseOfAddWorkflowResponseDto,
    ServerWorkflowsEndPointsWorkflowAddWorkflowEndPointError,
    Schemas.ServerWorkflowsContractsCommandsAddWorkflowCommand,
    {},
    {},
    {}
  >({ url: "/workflow/", method: "post", ...variables, signal });

export const useServerWorkflowsEndPointsWorkflowAddWorkflowEndPoint = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ServerSharedModelsApiResponseOfAddWorkflowResponseDto,
      ServerWorkflowsEndPointsWorkflowAddWorkflowEndPointError,
      ServerWorkflowsEndPointsWorkflowAddWorkflowEndPointVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useKasumiApiContext();
  return reactQuery.useMutation<
    Schemas.ServerSharedModelsApiResponseOfAddWorkflowResponseDto,
    ServerWorkflowsEndPointsWorkflowAddWorkflowEndPointError,
    ServerWorkflowsEndPointsWorkflowAddWorkflowEndPointVariables
  >({
    mutationFn: (
      variables: ServerWorkflowsEndPointsWorkflowAddWorkflowEndPointVariables,
    ) =>
      fetchServerWorkflowsEndPointsWorkflowAddWorkflowEndPoint({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ServerWorkflowsEndPointsWorkflowEditWorkflowEndPoinError =
  Fetcher.ErrorWrapper<undefined>;

export type ServerWorkflowsEndPointsWorkflowEditWorkflowEndPoinVariables = {
  body?: Schemas.ServerWorkflowsContractsCommandsEditWorkflowCommand;
} & KasumiApiContext["fetcherOptions"];

export const fetchServerWorkflowsEndPointsWorkflowEditWorkflowEndPoin = (
  variables: ServerWorkflowsEndPointsWorkflowEditWorkflowEndPoinVariables,
  signal?: AbortSignal,
) =>
  kasumiApiFetch<
    Schemas.ServerSharedModelsApiResponseOfEditWorkflowResponseDto,
    ServerWorkflowsEndPointsWorkflowEditWorkflowEndPoinError,
    Schemas.ServerWorkflowsContractsCommandsEditWorkflowCommand,
    {},
    {},
    {}
  >({ url: "/workflow/", method: "put", ...variables, signal });

export const useServerWorkflowsEndPointsWorkflowEditWorkflowEndPoin = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ServerSharedModelsApiResponseOfEditWorkflowResponseDto,
      ServerWorkflowsEndPointsWorkflowEditWorkflowEndPoinError,
      ServerWorkflowsEndPointsWorkflowEditWorkflowEndPoinVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useKasumiApiContext();
  return reactQuery.useMutation<
    Schemas.ServerSharedModelsApiResponseOfEditWorkflowResponseDto,
    ServerWorkflowsEndPointsWorkflowEditWorkflowEndPoinError,
    ServerWorkflowsEndPointsWorkflowEditWorkflowEndPoinVariables
  >({
    mutationFn: (
      variables: ServerWorkflowsEndPointsWorkflowEditWorkflowEndPoinVariables,
    ) =>
      fetchServerWorkflowsEndPointsWorkflowEditWorkflowEndPoin({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ServerWorkflowsEndPointsWorkflowAssignWorkflowToUserEndPointError =
  Fetcher.ErrorWrapper<undefined>;

export type ServerWorkflowsEndPointsWorkflowAssignWorkflowToUserEndPointVariables =
  {
    body?: Schemas.ServerWorkflowsContractsCommandsAssignWorkflowToUserCommand;
  } & KasumiApiContext["fetcherOptions"];

export const fetchServerWorkflowsEndPointsWorkflowAssignWorkflowToUserEndPoint =
  (
    variables: ServerWorkflowsEndPointsWorkflowAssignWorkflowToUserEndPointVariables,
    signal?: AbortSignal,
  ) =>
    kasumiApiFetch<
      Schemas.ServerSharedModelsApiResponseOfAssignWorkflowToUserResponseDto,
      ServerWorkflowsEndPointsWorkflowAssignWorkflowToUserEndPointError,
      Schemas.ServerWorkflowsContractsCommandsAssignWorkflowToUserCommand,
      {},
      {},
      {}
    >({
      url: "/workflow/assign-workflow-user",
      method: "post",
      ...variables,
      signal,
    });

export const useServerWorkflowsEndPointsWorkflowAssignWorkflowToUserEndPoint = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ServerSharedModelsApiResponseOfAssignWorkflowToUserResponseDto,
      ServerWorkflowsEndPointsWorkflowAssignWorkflowToUserEndPointError,
      ServerWorkflowsEndPointsWorkflowAssignWorkflowToUserEndPointVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useKasumiApiContext();
  return reactQuery.useMutation<
    Schemas.ServerSharedModelsApiResponseOfAssignWorkflowToUserResponseDto,
    ServerWorkflowsEndPointsWorkflowAssignWorkflowToUserEndPointError,
    ServerWorkflowsEndPointsWorkflowAssignWorkflowToUserEndPointVariables
  >({
    mutationFn: (
      variables: ServerWorkflowsEndPointsWorkflowAssignWorkflowToUserEndPointVariables,
    ) =>
      fetchServerWorkflowsEndPointsWorkflowAssignWorkflowToUserEndPoint({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ServerWorkflowsEndPointsWorkflowGetAllowedWorkflowsByUserEndPointError =
  Fetcher.ErrorWrapper<undefined>;

export type ServerWorkflowsEndPointsWorkflowGetAllowedWorkflowsByUserEndPointVariables =
  KasumiApiContext["fetcherOptions"];

export const fetchServerWorkflowsEndPointsWorkflowGetAllowedWorkflowsByUserEndPoint =
  (
    variables: ServerWorkflowsEndPointsWorkflowGetAllowedWorkflowsByUserEndPointVariables,
    signal?: AbortSignal,
  ) =>
    kasumiApiFetch<
      Schemas.ServerSharedModelsApiResponseOfGetAllowedWorkflowsByUserResponseDto,
      ServerWorkflowsEndPointsWorkflowGetAllowedWorkflowsByUserEndPointError,
      undefined,
      {},
      {},
      {}
    >({
      url: "/workflow/allowed-workflows",
      method: "get",
      ...variables,
      signal,
    });

export const useServerWorkflowsEndPointsWorkflowGetAllowedWorkflowsByUserEndPoint =
  <
    TData = Schemas.ServerSharedModelsApiResponseOfGetAllowedWorkflowsByUserResponseDto,
  >(
    variables: ServerWorkflowsEndPointsWorkflowGetAllowedWorkflowsByUserEndPointVariables,
    options?: Omit<
      reactQuery.UseQueryOptions<
        Schemas.ServerSharedModelsApiResponseOfGetAllowedWorkflowsByUserResponseDto,
        ServerWorkflowsEndPointsWorkflowGetAllowedWorkflowsByUserEndPointError,
        TData
      >,
      "queryKey" | "queryFn" | "initialData"
    >,
  ) => {
    const { fetcherOptions, queryOptions, queryKeyFn } =
      useKasumiApiContext(options);
    return reactQuery.useQuery<
      Schemas.ServerSharedModelsApiResponseOfGetAllowedWorkflowsByUserResponseDto,
      ServerWorkflowsEndPointsWorkflowGetAllowedWorkflowsByUserEndPointError,
      TData
    >({
      queryKey: queryKeyFn({
        path: "/workflow/allowed-workflows",
        operationId:
          "serverWorkflowsEndPointsWorkflowGetAllowedWorkflowsByUserEndPoint",
        variables,
      }),
      queryFn: ({ signal }) =>
        fetchServerWorkflowsEndPointsWorkflowGetAllowedWorkflowsByUserEndPoint(
          { ...fetcherOptions, ...variables },
          signal,
        ),
      ...options,
      ...queryOptions,
    });
  };

export type ServerWorkflowsEndPointsWorkflowGetKanbanCardsByColumnIdEndPointPathParams =
  {
    columnId: string;
  };

export type ServerWorkflowsEndPointsWorkflowGetKanbanCardsByColumnIdEndPointError =
  Fetcher.ErrorWrapper<undefined>;

export type ServerWorkflowsEndPointsWorkflowGetKanbanCardsByColumnIdEndPointVariables =
  {
    pathParams: ServerWorkflowsEndPointsWorkflowGetKanbanCardsByColumnIdEndPointPathParams;
  } & KasumiApiContext["fetcherOptions"];

export const fetchServerWorkflowsEndPointsWorkflowGetKanbanCardsByColumnIdEndPoint =
  (
    variables: ServerWorkflowsEndPointsWorkflowGetKanbanCardsByColumnIdEndPointVariables,
    signal?: AbortSignal,
  ) =>
    kasumiApiFetch<
      Schemas.ServerSharedModelsApiResponseOfGetKanbanCardsByColumnIdResponseDto,
      ServerWorkflowsEndPointsWorkflowGetKanbanCardsByColumnIdEndPointError,
      undefined,
      {},
      {},
      ServerWorkflowsEndPointsWorkflowGetKanbanCardsByColumnIdEndPointPathParams
    >({
      url: "/workflow/kanban-cards/{columnId}",
      method: "get",
      ...variables,
      signal,
    });

export const useServerWorkflowsEndPointsWorkflowGetKanbanCardsByColumnIdEndPoint =
  <
    TData = Schemas.ServerSharedModelsApiResponseOfGetKanbanCardsByColumnIdResponseDto,
  >(
    variables: ServerWorkflowsEndPointsWorkflowGetKanbanCardsByColumnIdEndPointVariables,
    options?: Omit<
      reactQuery.UseQueryOptions<
        Schemas.ServerSharedModelsApiResponseOfGetKanbanCardsByColumnIdResponseDto,
        ServerWorkflowsEndPointsWorkflowGetKanbanCardsByColumnIdEndPointError,
        TData
      >,
      "queryKey" | "queryFn" | "initialData"
    >,
  ) => {
    const { fetcherOptions, queryOptions, queryKeyFn } =
      useKasumiApiContext(options);
    return reactQuery.useQuery<
      Schemas.ServerSharedModelsApiResponseOfGetKanbanCardsByColumnIdResponseDto,
      ServerWorkflowsEndPointsWorkflowGetKanbanCardsByColumnIdEndPointError,
      TData
    >({
      queryKey: queryKeyFn({
        path: "/workflow/kanban-cards/{columnId}",
        operationId:
          "serverWorkflowsEndPointsWorkflowGetKanbanCardsByColumnIdEndPoint",
        variables,
      }),
      queryFn: ({ signal }) =>
        fetchServerWorkflowsEndPointsWorkflowGetKanbanCardsByColumnIdEndPoint(
          { ...fetcherOptions, ...variables },
          signal,
        ),
      ...options,
      ...queryOptions,
    });
  };

export type ServerWorkflowsEndPointsWorkflowGetWorkflowByIdEndPointPathParams =
  {
    id: string;
  };

export type ServerWorkflowsEndPointsWorkflowGetWorkflowByIdEndPointError =
  Fetcher.ErrorWrapper<undefined>;

export type ServerWorkflowsEndPointsWorkflowGetWorkflowByIdEndPointVariables = {
  pathParams: ServerWorkflowsEndPointsWorkflowGetWorkflowByIdEndPointPathParams;
} & KasumiApiContext["fetcherOptions"];

export const fetchServerWorkflowsEndPointsWorkflowGetWorkflowByIdEndPoint = (
  variables: ServerWorkflowsEndPointsWorkflowGetWorkflowByIdEndPointVariables,
  signal?: AbortSignal,
) =>
  kasumiApiFetch<
    Schemas.ServerSharedModelsApiResponseOfGetWorkflowByIdResponseDto,
    ServerWorkflowsEndPointsWorkflowGetWorkflowByIdEndPointError,
    undefined,
    {},
    {},
    ServerWorkflowsEndPointsWorkflowGetWorkflowByIdEndPointPathParams
  >({ url: "/workflow/{id}", method: "get", ...variables, signal });

export const useServerWorkflowsEndPointsWorkflowGetWorkflowByIdEndPoint = <
  TData = Schemas.ServerSharedModelsApiResponseOfGetWorkflowByIdResponseDto,
>(
  variables: ServerWorkflowsEndPointsWorkflowGetWorkflowByIdEndPointVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ServerSharedModelsApiResponseOfGetWorkflowByIdResponseDto,
      ServerWorkflowsEndPointsWorkflowGetWorkflowByIdEndPointError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useKasumiApiContext(options);
  return reactQuery.useQuery<
    Schemas.ServerSharedModelsApiResponseOfGetWorkflowByIdResponseDto,
    ServerWorkflowsEndPointsWorkflowGetWorkflowByIdEndPointError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/workflow/{id}",
      operationId: "serverWorkflowsEndPointsWorkflowGetWorkflowByIdEndPoint",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchServerWorkflowsEndPointsWorkflowGetWorkflowByIdEndPoint(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ServerWorkflowsEndPointsWorkflowGetWorkflowsEndPointError =
  Fetcher.ErrorWrapper<undefined>;

export type ServerWorkflowsEndPointsWorkflowGetWorkflowsEndPointVariables =
  KasumiApiContext["fetcherOptions"];

export const fetchServerWorkflowsEndPointsWorkflowGetWorkflowsEndPoint = (
  variables: ServerWorkflowsEndPointsWorkflowGetWorkflowsEndPointVariables,
  signal?: AbortSignal,
) =>
  kasumiApiFetch<
    Schemas.ServerSharedModelsApiResponseOfGetWorkflowsResponseDto,
    ServerWorkflowsEndPointsWorkflowGetWorkflowsEndPointError,
    undefined,
    {},
    {},
    {}
  >({ url: "/workflow/all", method: "get", ...variables, signal });

export const useServerWorkflowsEndPointsWorkflowGetWorkflowsEndPoint = <
  TData = Schemas.ServerSharedModelsApiResponseOfGetWorkflowsResponseDto,
>(
  variables: ServerWorkflowsEndPointsWorkflowGetWorkflowsEndPointVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ServerSharedModelsApiResponseOfGetWorkflowsResponseDto,
      ServerWorkflowsEndPointsWorkflowGetWorkflowsEndPointError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useKasumiApiContext(options);
  return reactQuery.useQuery<
    Schemas.ServerSharedModelsApiResponseOfGetWorkflowsResponseDto,
    ServerWorkflowsEndPointsWorkflowGetWorkflowsEndPointError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/workflow/all",
      operationId: "serverWorkflowsEndPointsWorkflowGetWorkflowsEndPoint",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchServerWorkflowsEndPointsWorkflowGetWorkflowsEndPoint(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation =
  | {
      path: "/streams/{tenantId}";
      operationId: "serverNotificationEndPointsStreamEventsTenantEventStream";
      variables: ServerNotificationEndPointsStreamEventsTenantEventStreamVariables;
    }
  | {
      path: "/hub/all";
      operationId: "serverSocialNetworkEndPointsHubsGetHubsEndPoint";
      variables: ServerSocialNetworkEndPointsHubsGetHubsEndPointVariables;
    }
  | {
      path: "/workflow/allowed-workflows";
      operationId: "serverWorkflowsEndPointsWorkflowGetAllowedWorkflowsByUserEndPoint";
      variables: ServerWorkflowsEndPointsWorkflowGetAllowedWorkflowsByUserEndPointVariables;
    }
  | {
      path: "/workflow/kanban-cards/{columnId}";
      operationId: "serverWorkflowsEndPointsWorkflowGetKanbanCardsByColumnIdEndPoint";
      variables: ServerWorkflowsEndPointsWorkflowGetKanbanCardsByColumnIdEndPointVariables;
    }
  | {
      path: "/workflow/{id}";
      operationId: "serverWorkflowsEndPointsWorkflowGetWorkflowByIdEndPoint";
      variables: ServerWorkflowsEndPointsWorkflowGetWorkflowByIdEndPointVariables;
    }
  | {
      path: "/workflow/all";
      operationId: "serverWorkflowsEndPointsWorkflowGetWorkflowsEndPoint";
      variables: ServerWorkflowsEndPointsWorkflowGetWorkflowsEndPointVariables;
    };
